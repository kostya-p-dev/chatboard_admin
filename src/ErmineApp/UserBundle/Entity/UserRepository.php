<?php

namespace ErmineApp\UserBundle\Entity;

use App\InterestsBundle\Service\FilesManager;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Symfony\Component\DependencyInjection\Container;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{

    /**
     * @var Container
     */
    protected $container;

    /**
     * @var FilesManager
     */
    protected $fileManager;

    /**
     * @param $container
     */
    public function setContainer($container){
        $this->container = $container;
//        $this->fileManager = $this->container->get('app_files_manager_service');
    }

    /**
     * @param User $user
     */
    public function save(User $user)
    {
        $this->getEntityManager()->persist($user);
        $this->getEntityManager()->flush();
    }

    /**
     * @param User $user
     */
    public function remove(User $user){
        $em = $this->getEntityManager();
        $em->remove($user);
        $em->flush();
    }



    public function findUsersByArray(array $friendsIds){
        $qb = $this->createQueryBuilder('u')
            ->where("u.id IN(:ids)")
            ->setParameter('ids', array_values($friendsIds))
        ;
        $res = $qb
            ->getQuery()
            ->getResult()
        ;
        return $res;
    }

    /**
     * @param $userId
     * @param $options
     * @return mixed
     */
    public function getNoteBookAllRes($userId, $options)
    {
        $sql = 'SELECT

                 u.id AS uId ,
                 u.name AS name ,
                 u.img as userImg ,
                 fr.status,
                 group_concat(i.name) as IntName,
                 group_concat(f.filepath) as userPrimaryInterestImg,
                 group_concat(ui.interestorder) as intOrder

                FROM Friends fr
                INNER JOIN User u ON u.id = fr.user_id
                LEFT JOIN UserInterests ui ON u.id = ui.user_id
                LEFT JOIN Interests i ON ui.interests_id = i.id
                LEFT JOIN Files f ON i.file_id = f.id
                WHERE fr.friend_id = '.$userId.' AND fr.status IN(10, 1, 11, 22, 2, 33, 3, 5)
                AND u.name LIKE \'%'.$options['search'].'%\'
                GROUP BY fr.id
                LIMIT ' . $options['limitFrom']. ', ' . $options['limitTo'] . '
                ;';

        $map = new ResultSetMapping();
        $map->addScalarResult('uId', 'uId');
        $map->addScalarResult('name', 'name');
        $map->addScalarResult('userImg', 'userImg');
        $map->addScalarResult('status', 'status');
        $map->addScalarResult('IntName', 'IntName');
        $map->addScalarResult('userPrimaryInterestImg', 'userPrimaryInterestImg');
        $map->addScalarResult('intOrder', 'intOrder');

        $res = $this->getEntityManager()->createNativeQuery($sql, $map)->getResult();
        $res =  $this->transformInterests($res);
        return $res;
    }

    /**
     * @param $res
     * @return mixed
     */
    protected function transformInterests($res){
        if(count($res) > 0){
            foreach($res as $key => $row){

                if(isset($row['userPrimaryInterestImg'])){
                    $imgArr = explode(',', $row['userPrimaryInterestImg']);
                    unset($row['userPrimaryInterestImg']);
                }else{
                    $imgArr = [];
                }

                if(isset($row['IntName'])){
                    $nameArr = explode(',', $row['IntName']);
                    unset($row['IntName']);
                }else{
                    $nameArr = [];
                }

                if(isset($row['intOrder'])){
                    $orderArr = explode(',', $row['intOrder']);
                    unset($row['intOrder']);
                }else{
                    $orderArr = [];
                }

                $interests = [];
                for($i = 0; $i < count($orderArr); $i++){
                    $interests[$i]['name'] = isset($nameArr[$i]) ? $nameArr[$i] : '';
                    $interests[$i]['interestorder'] = isset($orderArr[$i]) ? $orderArr[$i] : '';
                    $interests[$i]['img'] = isset($imgArr[$i]) ? $imgArr[$i] : '';
                }
//                $row['interests'] = $interests;
                /*Transform interests to array*/
                $strInterests = '';
                $primaryInterestsImg = '';
                foreach($interests as $ke => $int){
                    if($int['interestorder'] == 1){
                        if(count(explode(',', $strInterests )) < 2){
                            $strInterests .= $int['name'].',';
                            /*Img for primaryInterests*/
                            if($primaryInterestsImg == ''){
                                $primaryInterestsImg = $int['img'];
                            }

                        }
                    }
                }
                $k = 1;
                foreach($interests as $ke => $int){
                    if($int['interestorder'] != 1){
                        if(count(explode(',', $strInterests )) < 4){
                            $strInterests .= ' '.$int['name'].',';
                            /*Img for primaryInterests*/
                            if($primaryInterestsImg == ''){
                                $primaryInterestsImg = $int['img'];
                            }
                        }
                    }
                }
                $strInterests = trim($strInterests, ' ');
                $strInterests = trim($strInterests, ',');
                $row['interestsStr'] = $strInterests;
                $row['userPrimaryInterestImg'] = $primaryInterestsImg;
                $row['distance'] = '150';
                $row['date'] = '1451606400';
                $row['chatImg'] = $this->fileManager->transformImgUrl($this->fileManager->getSquareImgByUid($row['uId']));

                /*TransformUrl*/

                if(isset($row['userPrimaryInterestImg']) && $row['userPrimaryInterestImg'] != null){
                    $row['userPrimaryInterestImg'] = $this->fileManager->transformImgUrl($row['userPrimaryInterestImg']);
                }
                if(isset($row['userImg']) && $row['userImg'] != null){
                    $row['userImg'] = $this->fileManager->transformImgUrl($row['userImg']);
                }


                $res[$key] = $row;
            }
        }
        return $res;
    }

    /**
     * @param $user
     * @return array
     */
    public function findInterestsForUser($user){
        $sql = 'SELECT
                i.id, i.name AS name, f.filepath AS img, ui.type AS type, i.interesttype
                FROM UserInterests ui
                INNER JOIN Interests i ON  i.id = ui.interests_id
                LEFT JOIN Files f ON i.file_id = f.id
                WHERE ui.user_id = '.$user->getId().'
                ;';
        $map = new ResultSetMapping();
        $map->addScalarResult('id', 'id');
        $map->addScalarResult('name', 'name');
        $map->addScalarResult('img', 'img');
        $map->addScalarResult('type', 'type');
        $map->addScalarResult('interesttype', 'interesttype');
        $res = $this->getEntityManager()->createNativeQuery($sql, $map)->getResult();

        return $res;
    }

    /**
     * @param $user
     * @return array
     */
    public function findActivitiesForUser($user){
        $sql = 'SELECT
                a.id AS aId , a.title AS activityTitle, a.description AS activityDescription, f.filepath AS activityImg, int_f.filepath AS actPrimaryInterestsImg,
                a.promoted AS activityPromoted
                FROM Activities a
                LEFT JOIN ActivitiesFiles af ON af.activities_id = a.id

                INNER JOIN Files f ON af.files_id = f.id AND f.fileorder = 1
                LEFT JOIN ActivitiesInterests ai ON ai.activities_id = a.id AND ai.activityIntOrder = 1
                LEFT JOIN Interests i ON ai.interests_id = i.id
                LEFT JOIN Files int_f ON i.file_id = int_f.id

                WHERE a.user_id = '.$user->getId().'
                GROUP BY a.id
                ;';
        $map = new ResultSetMapping();
        $map->addScalarResult('aId', 'aId');
        $map->addScalarResult('activityTitle', 'activityTitle');
        $map->addScalarResult('activityDescription', 'activityDescription');
        $map->addScalarResult('activityImg', 'activityImg');
        $map->addScalarResult('actPrimaryInterestsImg', 'actPrimaryInterestsImg');
        $map->addScalarResult('activityPromoted', 'activityPromoted');

        $res = $this->getEntityManager()->createNativeQuery($sql, $map)->getResult();

        /*TransformUrl*/
        foreach($res as $key => $row){
            if(isset($row['activityImg']) && $row['activityImg'] != null){
                $row['activityImg'] = $this->fileManager->transformImgUrl($row['activityImg']);
            }
            if(isset($row['actPrimaryInterestsImg']) && $row['actPrimaryInterestsImg'] != null){
                $row['actPrimaryInterestsImg'] = $this->fileManager->transformImgUrl($row['actPrimaryInterestsImg']);
            }

            $res[$key] = $row;
        }

        return $res;
    }

    public function getNoteBookSectionRes($userId, $options)
    {
        $sql = 'SELECT
                 u.id AS uId ,
                 u.name AS name ,
                 u.img as userImg ,
                 fr.status,
                 group_concat(i.name) as IntName,
                 group_concat(f.filepath) as userPrimaryInterestImg,
                 group_concat(ui.interestorder) as intOrder

                FROM Friends fr
                INNER JOIN User u ON u.id = fr.user_id
                LEFT JOIN UserInterests ui ON u.id = ui.user_id
                LEFT JOIN Interests i ON ui.interests_id = i.id
                LEFT JOIN Files f ON i.file_id = f.id
                WHERE fr.friend_id = '.$userId.' AND fr.status IN('.$options['status'].')
                AND u.name LIKE \'%'.$options['search'].'%\'
                GROUP BY fr.id
                LIMIT ' . $options['limitFrom']. ', ' . $options['limitTo'] . '
                ;';

        $map = new ResultSetMapping();
        $map->addScalarResult('uId', 'uId');
        $map->addScalarResult('name', 'name');
        $map->addScalarResult('userImg', 'userImg');
        $map->addScalarResult('status', 'status');
        $map->addScalarResult('IntName', 'IntName');
        $map->addScalarResult('userPrimaryInterestImg', 'userPrimaryInterestImg');
        $map->addScalarResult('intOrder', 'intOrder');

        $res = $this->getEntityManager()->createNativeQuery($sql, $map)->getResult();

        $res = $this->transformInterests($res);

        return $res;
    }

    public function getUserInfo(){
        $sql = 'SELECT
                  COUNT(u.id)  AS total,
                  (SELECT COUNT(us.id) FROM User us WHERE us.isOnline = 1) AS online
                FROM User u';

        $map = new ResultSetMapping();
        $map->addScalarResult('total', 'total');
        $map->addScalarResult('online', 'online');

        $res = $this->getEntityManager()->createNativeQuery($sql, $map)->getSingleResult();
        return $res;
    }

    public function getStatByMonths(){
        $sql = 'SELECT count(id) AS userCount,
                YEAR(u.created) AS yearName,
                DATE_FORMAT(u.created, "%m") AS monthName,
                DATE_FORMAT(u.created, "%d") AS dayName
                FROM User u
                WHERE DATE_FORMAT(u.created, "%m-%Y") = DATE_FORMAT(NOW(), "%m-%Y")
                GROUP BY DAY(u.created)
                ORDER BY YEAR(u.created) DESC, MONTH(u.created) ASC, DAY(u.created) ASC
                LIMIT 0, 31
';

        $map = new ResultSetMapping();
        $map->addScalarResult('userCount', 'userCount');
        $map->addScalarResult('yearName', 'yearName');
        $map->addScalarResult('monthName', 'monthName');
        $map->addScalarResult('dayName', 'dayName');


        $res = $this->getEntityManager()->createNativeQuery($sql, $map)->getResult();
        return $res;
    }

    public function getStatByMonthsBifore(){
        $sql = 'SELECT count(id) AS userCount,
                YEAR(u.created) AS yearName,
                DATE_FORMAT(u.created, "%m") AS monthName,
                DATE_FORMAT(u.created, "%d") AS dayName
                FROM User u
                WHERE DATE_FORMAT(u.created, "%m-%Y") = DATE_FORMAT((NOW()- INTERVAL 1 MONTH), "%m-%Y")
                GROUP BY DAY(u.created)
                ORDER BY YEAR(u.created) DESC, MONTH(u.created) ASC, DAY(u.created) ASC
                LIMIT 0, 31
';

        $map = new ResultSetMapping();
        $map->addScalarResult('userCount', 'userCount');
        $map->addScalarResult('yearName', 'yearName');
        $map->addScalarResult('monthName', 'monthName');
        $map->addScalarResult('dayName', 'dayName');


        $res = $this->getEntityManager()->createNativeQuery($sql, $map)->getResult();
        return $res;
    }
}
